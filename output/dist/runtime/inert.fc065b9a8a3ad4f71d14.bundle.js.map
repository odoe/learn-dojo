{"version":3,"sources":["webpack://lib_learn_dojo/inert.ts","webpack://lib_learn_dojo/./node_modules/wicg-inert/dist/inert.js"],"names":["__webpack_require__","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","slice","Array","matches","Element","msMatchesSelector","_focusableElementsString","join","InertRoot","rootElement","inertManager","this","_inertManager","_rootElement","_managedNodes","Set","hasAttribute","_savedAriaHidden","getAttribute","setAttribute","_makeSubtreeUnfocusable","_observer","MutationObserver","_onMutation","bind","observe","attributes","childList","subtree","value","disconnect","removeAttribute","forEach","inertNode","_unmanageNode","node","startNode","_this2","composedTreeWalk","_visitNode","activeElement","document","body","contains","root","undefined","nodeType","Node","DOCUMENT_FRAGMENT_NODE","parentNode","blur","focus","ELEMENT_NODE","element","_adoptInertRoot","call","_manageNode","register","add","deregister","_this3","inertSubroot","getInertRoot","setInert","managedNodes","savedInertNode","records","self","record","type","addedNodes","removedNodes","_unmanageSubtree","attributeName","managedNode","get","set","ariaHidden","InertNode","inertRoot","_node","_overrodeFocusMethod","_inertRoots","_savedTabIndex","_destroyed","ensureUntabbable","_throwIfDestroyed","destroyed","Error","tabIndex","hasSavedTabIndex","size","destructor","callback","shadowRootAncestor","shadowRoot","localName","content","distributedNodes","getDistributedNodes","slot","_distributedNodes","assignedNodes","flatten","_i","child","firstChild","nextSibling","addInertStyle","querySelector","style","createElement","textContent","appendChild","InertManager","_document","Map","_watchForInert","head","documentElement","readyState","addEventListener","_onDocumentLoaded","inert","has","parent","_inertRoot","addInertRoot","removeInertRoot","inertElements","querySelectorAll","inertElement","_this","unshift","hasOwnProperty","factory"],"mappings":"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","file":"runtime/inert.fc065b9a8a3ad4f71d14.bundle.js","sourcesContent":["`!has('build-elide')`;\nrequire('wicg-inert/dist/inert');\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n  typeof define === 'function' && define.amd ? define('inert', factory) :\n  (factory());\n}(this, (function () { 'use strict';\n\n  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  /**\n   * This work is licensed under the W3C Software and Document License\n   * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).\n   */\n\n  // Convenience function for converting NodeLists.\n  /** @type {typeof Array.prototype.slice} */\n  var slice = Array.prototype.slice;\n\n  /**\n   * IE has a non-standard name for \"matches\".\n   * @type {typeof Element.prototype.matches}\n   */\n  var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\n\n  /** @type {string} */\n  var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');\n\n  /**\n   * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n   * attribute.\n   *\n   * Its main functions are:\n   *\n   * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n   *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n   *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n   *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n   *   instance exists for each focusable node which has at least one inert root as an ancestor.\n   *\n   * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n   *   attribute is removed from the root node). This is handled in the destructor, which calls the\n   *   `deregister` method on `InertManager` for each managed inert node.\n   */\n\n  var InertRoot = function () {\n    /**\n     * @param {!Element} rootElement The Element at the root of the inert subtree.\n     * @param {!InertManager} inertManager The global singleton InertManager object.\n     */\n    function InertRoot(rootElement, inertManager) {\n      _classCallCheck(this, InertRoot);\n\n      /** @type {!InertManager} */\n      this._inertManager = inertManager;\n\n      /** @type {!Element} */\n      this._rootElement = rootElement;\n\n      /**\n       * @type {!Set<!InertNode>}\n       * All managed focusable nodes in this InertRoot's subtree.\n       */\n      this._managedNodes = new Set();\n\n      // Make the subtree hidden from assistive technology\n      if (this._rootElement.hasAttribute('aria-hidden')) {\n        /** @type {?string} */\n        this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');\n      } else {\n        this._savedAriaHidden = null;\n      }\n      this._rootElement.setAttribute('aria-hidden', 'true');\n\n      // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n      this._makeSubtreeUnfocusable(this._rootElement);\n\n      // Watch for:\n      // - any additions in the subtree: make them unfocusable too\n      // - any removals from the subtree: remove them from this inert root's managed nodes\n      // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable\n      //   element, make that node a managed node.\n      this._observer = new MutationObserver(this._onMutation.bind(this));\n      this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n     * stored in this object and updates the state of all of the managed nodes.\n     */\n\n\n    _createClass(InertRoot, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._observer.disconnect();\n\n        if (this._rootElement) {\n          if (this._savedAriaHidden !== null) {\n            this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);\n          } else {\n            this._rootElement.removeAttribute('aria-hidden');\n          }\n        }\n\n        this._managedNodes.forEach(function (inertNode) {\n          this._unmanageNode(inertNode.node);\n        }, this);\n\n        // Note we cast the nulls to the ANY type here because:\n        // 1) We want the class properties to be declared as non-null, or else we\n        //    need even more casts throughout this code. All bets are off if an\n        //    instance has been destroyed and a method is called.\n        // 2) We don't want to cast \"this\", because we want type-aware optimizations\n        //    to know which properties we're setting.\n        this._observer = /** @type {?} */null;\n        this._rootElement = /** @type {?} */null;\n        this._managedNodes = /** @type {?} */null;\n        this._inertManager = /** @type {?} */null;\n      }\n\n      /**\n       * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.\n       */\n\n    }, {\n      key: '_makeSubtreeUnfocusable',\n\n\n      /**\n       * @param {!Node} startNode\n       */\n      value: function _makeSubtreeUnfocusable(startNode) {\n        var _this2 = this;\n\n        composedTreeWalk(startNode, function (node) {\n          return _this2._visitNode(node);\n        });\n\n        var activeElement = document.activeElement;\n\n        if (!document.body.contains(startNode)) {\n          // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n          var node = startNode;\n          /** @type {!ShadowRoot|undefined} */\n          var root = undefined;\n          while (node) {\n            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n              root = /** @type {!ShadowRoot} */node;\n              break;\n            }\n            node = node.parentNode;\n          }\n          if (root) {\n            activeElement = root.activeElement;\n          }\n        }\n        if (startNode.contains(activeElement)) {\n          activeElement.blur();\n          // In IE11, if an element is already focused, and then set to tabindex=-1\n          // calling blur() will not actually move the focus.\n          // To work around this we call focus() on the body instead.\n          if (activeElement === document.activeElement) {\n            document.body.focus();\n          }\n        }\n      }\n\n      /**\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_visitNode',\n      value: function _visitNode(node) {\n        if (node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        var element = /** @type {!Element} */node;\n\n        // If a descendant inert root becomes un-inert, its descendants will still be inert because of\n        // this inert root, so all of its managed nodes need to be adopted by this InertRoot.\n        if (element !== this._rootElement && element.hasAttribute('inert')) {\n          this._adoptInertRoot(element);\n        }\n\n        if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {\n          this._manageNode(element);\n        }\n      }\n\n      /**\n       * Register the given node with this InertRoot and with InertManager.\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_manageNode',\n      value: function _manageNode(node) {\n        var inertNode = this._inertManager.register(node, this);\n        this._managedNodes.add(inertNode);\n      }\n\n      /**\n       * Unregister the given node with this InertRoot and with InertManager.\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_unmanageNode',\n      value: function _unmanageNode(node) {\n        var inertNode = this._inertManager.deregister(node, this);\n        if (inertNode) {\n          this._managedNodes['delete'](inertNode);\n        }\n      }\n\n      /**\n       * Unregister the entire subtree starting at `startNode`.\n       * @param {!Node} startNode\n       */\n\n    }, {\n      key: '_unmanageSubtree',\n      value: function _unmanageSubtree(startNode) {\n        var _this3 = this;\n\n        composedTreeWalk(startNode, function (node) {\n          return _this3._unmanageNode(node);\n        });\n      }\n\n      /**\n       * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n       * @param {!Element} node\n       */\n\n    }, {\n      key: '_adoptInertRoot',\n      value: function _adoptInertRoot(node) {\n        var inertSubroot = this._inertManager.getInertRoot(node);\n\n        // During initialisation this inert root may not have been registered yet,\n        // so register it now if need be.\n        if (!inertSubroot) {\n          this._inertManager.setInert(node, true);\n          inertSubroot = this._inertManager.getInertRoot(node);\n        }\n\n        inertSubroot.managedNodes.forEach(function (savedInertNode) {\n          this._manageNode(savedInertNode.node);\n        }, this);\n      }\n\n      /**\n       * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n       * @param {!Array<!MutationRecord>} records\n       * @param {!MutationObserver} self\n       */\n\n    }, {\n      key: '_onMutation',\n      value: function _onMutation(records, self) {\n        records.forEach(function (record) {\n          var target = /** @type {!Element} */record.target;\n          if (record.type === 'childList') {\n            // Manage added nodes\n            slice.call(record.addedNodes).forEach(function (node) {\n              this._makeSubtreeUnfocusable(node);\n            }, this);\n\n            // Un-manage removed nodes\n            slice.call(record.removedNodes).forEach(function (node) {\n              this._unmanageSubtree(node);\n            }, this);\n          } else if (record.type === 'attributes') {\n            if (record.attributeName === 'tabindex') {\n              // Re-initialise inert node if tabindex changes\n              this._manageNode(target);\n            } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {\n              // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n              // already managed nodes from this inert subroot.\n              this._adoptInertRoot(target);\n              var inertSubroot = this._inertManager.getInertRoot(target);\n              this._managedNodes.forEach(function (managedNode) {\n                if (target.contains(managedNode.node)) {\n                  inertSubroot._manageNode(managedNode.node);\n                }\n              });\n            }\n          }\n        }, this);\n      }\n    }, {\n      key: 'managedNodes',\n      get: function get() {\n        return new Set(this._managedNodes);\n      }\n\n      /** @return {boolean} */\n\n    }, {\n      key: 'hasSavedAriaHidden',\n      get: function get() {\n        return this._savedAriaHidden !== null;\n      }\n\n      /** @param {?string} ariaHidden */\n\n    }, {\n      key: 'savedAriaHidden',\n      set: function set(ariaHidden) {\n        this._savedAriaHidden = ariaHidden;\n      }\n\n      /** @return {?string} */\n      ,\n      get: function get() {\n        return this._savedAriaHidden;\n      }\n    }]);\n\n    return InertRoot;\n  }();\n\n  /**\n   * `InertNode` initialises and manages a single inert node.\n   * A node is inert if it is a descendant of one or more inert root elements.\n   *\n   * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n   * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n   * is intrinsically focusable or not.\n   *\n   * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n   * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n   * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n   * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n   * or removes the `tabindex` attribute if the element is intrinsically focusable.\n   */\n\n\n  var InertNode = function () {\n    /**\n     * @param {!Node} node A focusable element to be made inert.\n     * @param {!InertRoot} inertRoot The inert root element associated with this inert node.\n     */\n    function InertNode(node, inertRoot) {\n      _classCallCheck(this, InertNode);\n\n      /** @type {!Node} */\n      this._node = node;\n\n      /** @type {boolean} */\n      this._overrodeFocusMethod = false;\n\n      /**\n       * @type {!Set<!InertRoot>} The set of descendant inert roots.\n       *    If and only if this set becomes empty, this node is no longer inert.\n       */\n      this._inertRoots = new Set([inertRoot]);\n\n      /** @type {?number} */\n      this._savedTabIndex = null;\n\n      /** @type {boolean} */\n      this._destroyed = false;\n\n      // Save any prior tabindex info and make this node untabbable\n      this.ensureUntabbable();\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.\n     * This makes the managed node focusable again and deletes all of the previously stored state.\n     */\n\n\n    _createClass(InertNode, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._throwIfDestroyed();\n\n        if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {\n          var element = /** @type {!Element} */this._node;\n          if (this._savedTabIndex !== null) {\n            element.setAttribute('tabindex', this._savedTabIndex);\n          } else {\n            element.removeAttribute('tabindex');\n          }\n\n          // Use `delete` to restore native focus method.\n          if (this._overrodeFocusMethod) {\n            delete element.focus;\n          }\n        }\n\n        // See note in InertRoot.destructor for why we cast these nulls to ANY.\n        this._node = /** @type {?} */null;\n        this._inertRoots = /** @type {?} */null;\n        this._destroyed = true;\n      }\n\n      /**\n       * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n       * If the object has been destroyed, any attempt to access it will cause an exception.\n       */\n\n    }, {\n      key: '_throwIfDestroyed',\n\n\n      /**\n       * Throw if user tries to access destroyed InertNode.\n       */\n      value: function _throwIfDestroyed() {\n        if (this.destroyed) {\n          throw new Error('Trying to access destroyed InertNode');\n        }\n      }\n\n      /** @return {boolean} */\n\n    }, {\n      key: 'ensureUntabbable',\n\n\n      /** Save the existing tabindex value and make the node untabbable and unfocusable */\n      value: function ensureUntabbable() {\n        if (this.node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        var element = /** @type {!Element} */this.node;\n        if (matches.call(element, _focusableElementsString)) {\n          if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {\n            return;\n          }\n\n          if (element.hasAttribute('tabindex')) {\n            this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n          }\n          element.setAttribute('tabindex', '-1');\n          if (element.nodeType === Node.ELEMENT_NODE) {\n            element.focus = function () {};\n            this._overrodeFocusMethod = true;\n          }\n        } else if (element.hasAttribute('tabindex')) {\n          this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n          element.removeAttribute('tabindex');\n        }\n      }\n\n      /**\n       * Add another inert root to this inert node's set of managing inert roots.\n       * @param {!InertRoot} inertRoot\n       */\n\n    }, {\n      key: 'addInertRoot',\n      value: function addInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots.add(inertRoot);\n      }\n\n      /**\n       * Remove the given inert root from this inert node's set of managing inert roots.\n       * If the set of managing inert roots becomes empty, this node is no longer inert,\n       * so the object should be destroyed.\n       * @param {!InertRoot} inertRoot\n       */\n\n    }, {\n      key: 'removeInertRoot',\n      value: function removeInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots['delete'](inertRoot);\n        if (this._inertRoots.size === 0) {\n          this.destructor();\n        }\n      }\n    }, {\n      key: 'destroyed',\n      get: function get() {\n        return (/** @type {!InertNode} */this._destroyed\n        );\n      }\n    }, {\n      key: 'hasSavedTabIndex',\n      get: function get() {\n        return this._savedTabIndex !== null;\n      }\n\n      /** @return {!Node} */\n\n    }, {\n      key: 'node',\n      get: function get() {\n        this._throwIfDestroyed();\n        return this._node;\n      }\n\n      /** @param {?number} tabIndex */\n\n    }, {\n      key: 'savedTabIndex',\n      set: function set(tabIndex) {\n        this._throwIfDestroyed();\n        this._savedTabIndex = tabIndex;\n      }\n\n      /** @return {?number} */\n      ,\n      get: function get() {\n        this._throwIfDestroyed();\n        return this._savedTabIndex;\n      }\n    }]);\n\n    return InertNode;\n  }();\n\n  /**\n   * InertManager is a per-document singleton object which manages all inert roots and nodes.\n   *\n   * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n   * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n   * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n   * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n   * is created for each such node, via the `_managedNodes` map.\n   */\n\n\n  var InertManager = function () {\n    /**\n     * @param {!Document} document\n     */\n    function InertManager(document) {\n      _classCallCheck(this, InertManager);\n\n      if (!document) {\n        throw new Error('Missing required argument; InertManager needs to wrap a document.');\n      }\n\n      /** @type {!Document} */\n      this._document = document;\n\n      /**\n       * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n       * @type {!Map<!Node, !InertNode>}\n       */\n      this._managedNodes = new Map();\n\n      /**\n       * All inert roots known to this InertManager. In a map to allow looking up by Node.\n       * @type {!Map<!Node, !InertRoot>}\n       */\n      this._inertRoots = new Map();\n\n      /**\n       * Observer for mutations on `document.body`.\n       * @type {!MutationObserver}\n       */\n      this._observer = new MutationObserver(this._watchForInert.bind(this));\n\n      // Add inert style.\n      addInertStyle(document.head || document.body || document.documentElement);\n\n      // Wait for document to be loaded.\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n      } else {\n        this._onDocumentLoaded();\n      }\n    }\n\n    /**\n     * Set whether the given element should be an inert root or not.\n     * @param {!Element} root\n     * @param {boolean} inert\n     */\n\n\n    _createClass(InertManager, [{\n      key: 'setInert',\n      value: function setInert(root, inert) {\n        if (inert) {\n          if (this._inertRoots.has(root)) {\n            // element is already inert\n            return;\n          }\n\n          var inertRoot = new InertRoot(root, this);\n          root.setAttribute('inert', '');\n          this._inertRoots.set(root, inertRoot);\n          // If not contained in the document, it must be in a shadowRoot.\n          // Ensure inert styles are added there.\n          if (!this._document.body.contains(root)) {\n            var parent = root.parentNode;\n            while (parent) {\n              if (parent.nodeType === 11) {\n                addInertStyle(parent);\n              }\n              parent = parent.parentNode;\n            }\n          }\n        } else {\n          if (!this._inertRoots.has(root)) {\n            // element is already non-inert\n            return;\n          }\n\n          var _inertRoot = this._inertRoots.get(root);\n          _inertRoot.destructor();\n          this._inertRoots['delete'](root);\n          root.removeAttribute('inert');\n        }\n      }\n\n      /**\n       * Get the InertRoot object corresponding to the given inert root element, if any.\n       * @param {!Node} element\n       * @return {!InertRoot|undefined}\n       */\n\n    }, {\n      key: 'getInertRoot',\n      value: function getInertRoot(element) {\n        return this._inertRoots.get(element);\n      }\n\n      /**\n       * Register the given InertRoot as managing the given node.\n       * In the case where the node has a previously existing inert root, this inert root will\n       * be added to its set of inert roots.\n       * @param {!Node} node\n       * @param {!InertRoot} inertRoot\n       * @return {!InertNode} inertNode\n       */\n\n    }, {\n      key: 'register',\n      value: function register(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (inertNode !== undefined) {\n          // node was already in an inert subtree\n          inertNode.addInertRoot(inertRoot);\n        } else {\n          inertNode = new InertNode(node, inertRoot);\n        }\n\n        this._managedNodes.set(node, inertNode);\n\n        return inertNode;\n      }\n\n      /**\n       * De-register the given InertRoot as managing the given inert node.\n       * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n       * node from the InertManager's set of managed nodes if it is destroyed.\n       * If the node is not currently managed, this is essentially a no-op.\n       * @param {!Node} node\n       * @param {!InertRoot} inertRoot\n       * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.\n       */\n\n    }, {\n      key: 'deregister',\n      value: function deregister(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (!inertNode) {\n          return null;\n        }\n\n        inertNode.removeInertRoot(inertRoot);\n        if (inertNode.destroyed) {\n          this._managedNodes['delete'](node);\n        }\n\n        return inertNode;\n      }\n\n      /**\n       * Callback used when document has finished loading.\n       */\n\n    }, {\n      key: '_onDocumentLoaded',\n      value: function _onDocumentLoaded() {\n        // Find all inert roots in document and make them actually inert.\n        var inertElements = slice.call(this._document.querySelectorAll('[inert]'));\n        inertElements.forEach(function (inertElement) {\n          this.setInert(inertElement, true);\n        }, this);\n\n        // Comment this out to use programmatic API only.\n        this._observer.observe(this._document.body, { attributes: true, subtree: true, childList: true });\n      }\n\n      /**\n       * Callback used when mutation observer detects attribute changes.\n       * @param {!Array<!MutationRecord>} records\n       * @param {!MutationObserver} self\n       */\n\n    }, {\n      key: '_watchForInert',\n      value: function _watchForInert(records, self) {\n        var _this = this;\n        records.forEach(function (record) {\n          switch (record.type) {\n            case 'childList':\n              slice.call(record.addedNodes).forEach(function (node) {\n                if (node.nodeType !== Node.ELEMENT_NODE) {\n                  return;\n                }\n                var inertElements = slice.call(node.querySelectorAll('[inert]'));\n                if (matches.call(node, '[inert]')) {\n                  inertElements.unshift(node);\n                }\n                inertElements.forEach(function (inertElement) {\n                  this.setInert(inertElement, true);\n                }, _this);\n              }, _this);\n              break;\n            case 'attributes':\n              if (record.attributeName !== 'inert') {\n                return;\n              }\n              var target = /** @type {!Element} */record.target;\n              var inert = target.hasAttribute('inert');\n              _this.setInert(target, inert);\n              break;\n          }\n        }, this);\n      }\n    }]);\n\n    return InertManager;\n  }();\n\n  /**\n   * Recursively walk the composed tree from |node|.\n   * @param {!Node} node\n   * @param {(function (!Element))=} callback Callback to be called for each element traversed,\n   *     before descending into child nodes.\n   * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n   */\n\n\n  function composedTreeWalk(node, callback, shadowRootAncestor) {\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      var element = /** @type {!Element} */node;\n      if (callback) {\n        callback(element);\n      }\n\n      // Descend into node:\n      // If it has a ShadowRoot, ignore all child elements - these will be picked\n      // up by the <content> or <shadow> elements. Descend straight into the\n      // ShadowRoot.\n      var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;\n      if (shadowRoot) {\n        composedTreeWalk(shadowRoot, callback, shadowRoot);\n        return;\n      }\n\n      // If it is a <content> element, descend into distributed elements - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'content') {\n        var content = /** @type {!HTMLContentElement} */element;\n        // Verifies if ShadowDom v0 is supported.\n        var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];\n        for (var i = 0; i < distributedNodes.length; i++) {\n          composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n\n      // If it is a <slot> element, descend into assigned nodes - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'slot') {\n        var slot = /** @type {!HTMLSlotElement} */element;\n        // Verify if ShadowDom v1 is supported.\n        var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];\n        for (var _i = 0; _i < _distributedNodes.length; _i++) {\n          composedTreeWalk(_distributedNodes[_i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n    }\n\n    // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n    // element, nor a <shadow> element recurse normally.\n    var child = node.firstChild;\n    while (child != null) {\n      composedTreeWalk(child, callback, shadowRootAncestor);\n      child = child.nextSibling;\n    }\n  }\n\n  /**\n   * Adds a style element to the node containing the inert specific styles\n   * @param {!Node} node\n   */\n  function addInertStyle(node) {\n    if (node.querySelector('style#inert-style')) {\n      return;\n    }\n    var style = document.createElement('style');\n    style.setAttribute('id', 'inert-style');\n    style.textContent = '\\n' + '[inert] {\\n' + '  pointer-events: none;\\n' + '  cursor: default;\\n' + '}\\n' + '\\n' + '[inert], [inert] * {\\n' + '  user-select: none;\\n' + '  -webkit-user-select: none;\\n' + '  -moz-user-select: none;\\n' + '  -ms-user-select: none;\\n' + '}\\n';\n    node.appendChild(style);\n  }\n\n  /** @type {!InertManager} */\n  var inertManager = new InertManager(document);\n\n  if (!Element.prototype.hasOwnProperty('inert')) {\n    Object.defineProperty(Element.prototype, 'inert', {\n      enumerable: true,\n      /** @this {!Element} */\n      get: function get() {\n        return this.hasAttribute('inert');\n      },\n      /** @this {!Element} */\n      set: function set(inert) {\n        inertManager.setInert(this, inert);\n      }\n    });\n  }\n\n})));\n"],"sourceRoot":""}